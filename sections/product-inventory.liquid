{{ 'product-inventory.css' | asset_url | stylesheet_tag }}

<div class="product-inventory-wrapper page-width">
  <product-inventory
    class="product-inventory"
  >
    <picture>
      <source media="(min-width: 901px)" srcset="{{ section.settings.pc_image | img_url: 'master' }}">
      <source media="(max-width: 900px)" srcset="{{ section.settings.mb_image | img_url: 'master' }}">
      <img src="{{ section.settings.pc_image | img_url: 'master' }}" alt="{{ section.settings.text }}">
    </picture>
    <div class="inventory-right">
      <p class="title">{{ section.settings.title }}</p>
      <p class="text">
        {{- section.settings.text -}}
        <span class="inventory"></span>
      </p>
    </div>

    {% for variant in product.variants %}
      <span
        class="inventory-quantity"
        data-quantity="{{ variant.inventory_quantity }}"
        data-id="{{ variant.id }}"
      ></span>
    {% endfor %}
  </product-inventory>
</div>
<script>
  class ProductInventory extends HTMLElement {
    constructor() {
      super();
      this.yRange = [-5, 5];
      this.xRange = [-5, 5];
      if (window.innerWidth > 901) {
        this.addEventListener('mousemove', (e) => this.onmousemove(e));
        this.addEventListener('mouseout', this.handleMouseout);
      }
    }
    connectedCallback() {
      const inventory = this.querySelector('.inventory');
      inventory.innerText = `${this.getCurrentInventory()[0].dataset.quantity}`;
    }
    getCurrentInventory() {
      const quantityElements = Array.from(this.querySelectorAll('.inventory-quantity'));
      return quantityElements && quantityElements.filter((item) => item.dataset.id === '46976335249730');
    }
    getRotate = (range, value, max) => (value / max) * (range[1] - range[0]) + range[0];

    onmousemove(e) {
      const { offsetX, offsetY } = e;
      const { offsetWidth, offsetHeight } = this;
      const ry = -this.getRotate(this.yRange, offsetX, offsetWidth);
      const rx = this.getRotate(this.xRange, offsetY, offsetHeight);
      this.style.transform = `perspective(700px) rotateX(${rx}deg) rotateY(${ry}deg)`;
      this.style.transition = 'none';
    }

    handleMouseout() {
      this.style.transition = 'transform 0.3s ease';
      this.style.transform = 'rotateX(0deg) rotateY(0deg)';
    }

    disconnectedCallback() {
      this.removeEventListener('mousemove', this.onmousemove);
      this.removeEventListener('mouseout', this.handleMouseout);
    }
  }
  customElements.define('product-inventory', ProductInventory);
</script>
{% schema %}
{
  "name": "product inventory",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "title"
    },
    {
      "type": "text",
      "id": "text",
      "label": "text"
    },
    {
      "type": "image_picker",
      "id": "pc_image",
      "label": "pc image"
    },
    {
      "type": "image_picker",
      "id": "mb_image",
      "label": "mb image"
    }
  ],
  "presets": [
    {
      "name": "product inventory"
    }
  ]
}
{% endschema %}
