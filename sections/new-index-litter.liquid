{{ 'index-litter.css' | asset_url | stylesheet_tag }}

<div class="new-index-litter">
  <div class="page-width">
    <div class="container">
      <div class="play">
        <img src="./img/honor-1.png" alt="">
      </div>
      <div class="litter-content">
        <p class="sub-title">SNOW+ Self-cleaning Litter Box</p>
        <p class="title"><span>Finally, a Litter Box </span><span>That Collects All</span> <span>Scoop Ideas</span></p>
        <div class="options">
          <div class="item">
            <p>Hands</p>
            <p>-free</p>
          </div>
          <i class="line"></i>
          <div class="item">
            <p>Zero</p>
            <p>Odor</p>
          </div>
          <i class="line"></i>
          <div class="item">
            <p>Less</p>
            <p>Mess</p>
          </div>
        </div>
        <a target="_blank" href="/products/snow-self-cleaning-litter-box" class="button">Order Now</a>
      </div>
    </div>
  </div>
</div>
<script>
  const imgSrcMap = ['./img/honor-1.png', './img/honor-2.png', './img/honor-3.png', './img/honor-4.png'];

  const container = document.querySelector('.new-index-litter .container');

  const target = document.querySelector('.new-index-litter .play img');

  const viewportHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

  let currentIndex = 0;

  function init() {
    const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
    const containerHeight = document.querySelector('.new-index-litter .container').offsetHeight;
    const playContainer = document.querySelector('.new-index-litter .play');
    const playContainerTop = playContainer.offsetTop;
    const scrollPercentage = (playContainerTop / (containerHeight - playContainer.offsetHeight)) * 100;
    const currentIndex = Math.floor((scrollPercentage / 100) * imgSrcMap.length);

    const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--main-padding-top'));
    container.style.top = `${(viewportHeight - container.offsetHeight - headerHeight) / 2 + headerHeight}px `;

    if (currentIndex > imgSrcMap.length - 1) return;
    target.src = imgSrcMap[currentIndex];
  }

  const observerLitter = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        window.addEventListener('scroll', init, { passive: true });
      } else {
        window.removeEventListener('scroll', init, { passive: true });
      }
    });
  });

  observerLitter.observe(container);
</script>
{% schema %}
{
  "name": "new-index-litter",
  "settings": [
    {
      "type": "image_picker",
      "id": "pc_image",
      "label": "pc card image"
    },
    {
      "type": "image_picker",
      "id": "mb_image",
      "label": "mb card image"
    }
  ],
  "presets": [
    {
      "name": "new-index-litter"
    }
  ]
}
{% endschema %}
